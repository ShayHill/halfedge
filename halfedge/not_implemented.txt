# # =============================================================================
# class TestHalfEdgesAdd:


#     # -------------------------------------------------------------------------
#     def test_add_centroid(self) -> None:
#         """ vert object added to face results in two additional face edges

#         """
#         corners = cast(
#             List[VType], [(0.0, 0.0), (1.0, 0.0), (1.0, 1.0), (0.0, 1.0)]
#         )
#         faces = [[0, 1, 2, 3]]
#         mesh = HalfEdges.from_vlvi(corners, faces)

#         face = sorted(mesh._faces)[0]
#         orig = sorted(mesh._verts)[0]
#         mesh.add_centroid(face, orig)
#         mesh.assert_valid_mesh()

#         assert mesh.vl == corners[1:] + [(0.5, 0.5), corners[0]]
#         assert mesh.vi == [[4, 0, 1, 2, 4, 3]]


#     # -------------------------------------------------------------------------
#     def test_bisect_edge(self) -> None:
#         """ algorithmic edge split matches explicit edge split

#         """
#         # explicitly defined with edge split
#         vl = cast(
#             List[VType], [(0, 0), (1, 0), (2, 0), (2, 1), (1, 1), (0, 1), (1, 0.5)]
#         )
#         vi = [[0, 1, 6, 4, 5], [1, 2, 3, 4, 6]]
#         expl = HalfEdges.from_vlvi(vl, vi)
#         expl.assert_valid_mesh()

#         # adjacent faces, split with method
#         vl = vl[:-1]
#         vi = [[0, 1, 4, 5], [1, 2, 3, 4]]
#         algo = HalfEdges.from_vlvi(vl, vi)
#         algo.assert_valid_mesh()

#         edge = sorted(algo._edges)[1]
#         algo.bisect_edge(edge)
#         algo.assert_valid_mesh()

#         assert are_equivalent_meshes(algo, expl)